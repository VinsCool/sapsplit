mads 2.1.3
Source: decompress.asm
     1 				;*********************************************************************************
     2 				;* DUMB ZX2 Decompressor or whatever this will become later...                   *
     3 				;*                                                                               *
     4 				;* To build: 'mads decompress.asm -l:ASSEMBLED/build.lst -o:ASSEMBLED/build.xex' *
     5 				;*********************************************************************************
     6
     7 				;* ----------------------------------------------------------------------------
     8
     9 				;* Few definitions needed for building executable Atari binaries
    10
    11 					icl "atari.def"
Source: atari.def
     1 				;* some memory addresses and definitions
     2
     3 				;//---------------------------------------------------------------------------------------------
     4
     5 = 000A			.def DOSVEC			= $000A
     6 = 0012			.def RTCLOK			= $0012	; Real Time Clock
     7
     8 = 0200			.def VDSLST			= $0200	; Display List Interrupt Vector
     9
    10 = 0222			.def VVBLKI			= $0222	; Vertical Blank Immediate (VBI) Register
    11 = 022F			.def SDMCTL			= $022F	; Shadow Direct Memory Access Control address
    12 = 0230			.def SDLSTL			= $0230
    13 = 02C4			.def COLOR0			= $02C4
    14 = 02C5			.def COLOR1			= $02C5
    15 = 02C6			.def COLOR2			= $02C6
    16 = 02C7			.def COLOR3			= $02C7
    17 = 02C8			.def COLOR4			= $02C8
    18 = 02F2			.def CH1			= $02F2
    19 = 02F4			.def CHBAS 			= $02F4
    20 = 02FC			.def CH				= $02FC
    21
    22 = D000			.def HPOSP0          		= $D000	; HORIZONTAL POSITION P0
    23 = D001			.def HPOSP1          		= $D001	; HORIZONTAL POSITION P1
    24 = D002			.def HPOSP2          		= $D002	; HORIZONTAL POSITION P2
    25 = D003			.def HPOSP3          		= $D003	; HORIZONTAL POSITION P3
    26 = D004			.def HPOSM0          		= $D004	; HORIZONTAL POSITION M0
    27 = D005			.def HPOSM1          		= $D005	; HORIZONTAL POSITION M1
    28 = D006			.def HPOSM2          		= $D006	; HORIZONTAL POSITION M2
    29 = D007			.def HPOSM3          		= $D007	; HORIZONTAL POSITION M3
    30 = D008			.def SIZEP0          		= $D008	; SIZE P0
    31 = D009			.def SIZEP1          		= $D009	; SIZE P0
    32 = D00A			.def SIZEP2          		= $D00A	; SIZE P0
    33 = D00B			.def SIZEP3          		= $D00B	; SIZE P0
    34 = D00C			.def SIZEM           		= $D00C	; SIZE M
    35 = D00D			.def GRAFP0          		= $D00D
    36 = D00E			.def GRAFP1          		= $D00E
    37 = D00F			.def GRAFP2          		= $D00F
    38 = D010			.def GRAFP3          		= $D010
    39 = D010			.def TRIG0			= $D010
    40 = D011			.def GRAFM           		= $D011
    41 = D012			.def COLPM0          		= $D012	; COLOR P0/M0
    42 = D013			.def COLPM1          		= $D013	; COLOR P1/M1
    43 = D014			.def COLPM2          		= $D014	; COLOR P2/M2
    44 = D014			.def NTSCPAL         		= $D014
    45 = D015			.def COLPM3          		= $D015	; COLOR P3/M3
    46 = D016			.def COLPF0         		= $D016
    47 = D017			.def COLPF1          		= $D017
    48 = D018			.def COLPF2          		= $D018
    49 = D019			.def COLPF3          		= $D019
    50 = D01A			.def COLBK           		= $D01A
    51 = D01B			.def GPRIOR          		= $D01B
    52 = D01D			.def GRACTL          		= $D01D
    53
    54 = D200			.def POKEY 			= $D200
    55 = D209			.def KBCODE			= $D209
    56 = D20A			.def RANDOM			= $D20A
    57 = D20E			.def IRQEN          		= $D20E
    58 = D20E			.def IRQST          		= $D20E
    59 = D20F			.def SKCTL			= $D20F
    60 = D20F			.def SKSTAT			= $D20F
    61
    62 = D300			.def PORTA			= $D300
    63 = D301			.def PORTB           		= $D301
    64
    65 = D400			.def DMACTL          		= $D400
    66 = D401			.def CHACTL          		= $D401
    67 = D402			.def DLISTL          		= $D402
    68 = D403			.def DLISTH          		= $D403
    69 = D404			.def HSCROL          		= $D404
    70 = D405			.def VSCROL          		= $D405
    71 = D407			.def PMBASE          		= $D407	; STARTING ADRESS PLAYER MISSILE GRAPHICS
    72 = D409			.def CHBASE          		= $D409
    73 = D40A			.def WSYNC           		= $D40A
    74 = D40B			.def VCOUNT          		= $D40B
    75 = D40E			.def NMIEN          		= $D40E 
    76 = D40F			.def NMIST           		= $D40F
    77 = D40F			.def NMIRES			= $D40F
    78
    79 = FFFA			.def NMI             		= $FFFA
    80 = FFFC			.def RESET           		= $FFFC
    81 = FFFE			.def IRQ             		= $FFFE
    82
    83 				;//---------------------------------------------------------------------------------------------
    84
    85 				.MACRO CHECK_NTSCPAL
    86 						lda		NTSCPAL
    87 						cmp		#1
    88 				.ENDM
    89
    90 				.MACRO SETBKCOL COLVAL
    91 				.ifdef DEBUG_COLOR
    92 						lda		#:COLVAL 
    93 						sta		COLBK
    94 				.endif
    95 				.ENDM
    96
    97 				.MACRO KIL
    98 						dta 2
    99 				.ENDM
   100
   101 				;//---------------------------------------------------------------------------------------------
   102
   103 = 0040			.def LMS                 	= 64
   104 = 0010			.def HS                  	= 16
   105 = 0004			.def MODE4               	= 4
   106 = 000D			.def MODED               	= $0D
   107 = 000E			.def MODEE               	= $0E
   108 = 000F			.def MODEF               	= $0F
   109 = 0070			.def BLANK8              	= $70
   110 = 0080			.def DLI                 	= 128
   111 = 0041			.def DLIJUMP             	= $41	; jump + wait vsync
   112 = 0001			.def DL_JUMP             	= $1	; jump 
   113 = 0000			.def PFSIZE_DISABLED		= 0
   114 = 0001			.def PFSIZE_NARROW		= 1
   115 = 0002			.def PFSIZE_NORMAL		= 2
   116 = 0003			.def PFSIZE_WIDE		= 3
   117 = 0002			.def GRACTL_PDMA		= 1<<1
   118 = 0001			.def GRACTL_MDMA		= 1<<0
    12
    13 = 0080			ZPG	= $80
    14 = 0700			ZX2BUF	= $700
    15 = 1000			DZX2	= ZX2BUF + ($100 * 9)
    16
    17 				.MACRO GOTOCHUNK CHUNK
    18 				;	.byte :CHUNK + $80
    19 					.byte $FF, :CHUNK
    20 				.ENDM
    21
    22
    23 				;* ----------------------------------------------------------------------------
    24
    25 				;* Zeropage variables for quick access, also used for Indirect Addressing Mode
    26
    27 					org ZPG
    28
    29 				.LOCAL ZPZX2
    30 = 0080			TMP0		.ds 1
    31 = 0081			TMP1		.ds 1
    32 = 0082			BufferFrom	.ds 2*9
    33 = 0094			BufferTo	.ds 2*9
    34 = 00A6			BufferOffset	.ds 2*9
    35 = 00B8			ByteLookup	.ds 2*9
    36 = 00CA			ByteStatus	.ds 2*9
    37 = 00DC			ByteChunk	.ds 2*9
    38 = 00B8			LastOffset = ByteLookup
    39 = 00B9			ByteCount = ByteLookup+1
    40 = 00CA			StatusCode = ByteStatus
    41 = 00CB			BitByte = ByteStatus+1
    42 = 00DC			ChunkIndex = ByteChunk
    43 = 00DD			Unused = ByteChunk+1
    44 				.ENDL
    45
    46 				;* ----------------------------------------------------------------------------
    47
    48 				;* ZX2-based SAP-R playback music driver, with very rudimentary functionalities
    49
    50 					org DZX2
    51 					icl "dzx2.asm"
Source: dzx2.asm
     1 				; -----------------------------------------------------------------------------
     2 				; ZX2 decoder by Einar Saukas, 6502 port by Vin Samuel (VinsCool)
     3 				; -----------------------------------------------------------------------------
     4 				; Parameters:
     5 				;	BufferFrom: source address (compressed data)
     6 				;	BufferTo: destination address (decompressing)
     7 				; -----------------------------------------------------------------------------
     8
     9 				//-------------------------------------------//
    10
    11 				DecompressZX2:
    12 FFFF> 1000-1134> A2 10		ldx #8*2
    13
    14 1002			DecompressZX2Continue:
    15 1002 B4 CA			ldy ZPZX2.StatusCode,x
    16 1004 30 21			bmi CopyFromLastOffset		; State = $FF -> Copy From Last Offset
    17 1006 D0 03			bne CopyFromLiteral		; State = $01 -> Copy From Literal
    18 1008 20 67 10			jsr DecompressZX2Reset		; State = $00 -> Not Initialised, or End of File was reached
    19
    20 				//-------------------------------------------//
    21
    22 100B			CopyFromLiteral:
    23 				;	jsr GetByteFrom
    24 100B A1 82			lda (ZPZX2.BufferFrom,x)
    25 100D F6 82			inc ZPZX2.BufferFrom,x
    26 100F D0 02			bne CopyFromLiteral_a
    27 1011 F6 83			inc ZPZX2.BufferFrom+1,x
    28 1013			CopyFromLiteral_a:
    29 				;	jsr WriteByteTo
    30 1013 81 94			sta (ZPZX2.BufferTo,x)
    31 1015 9D ED 10			sta SDWPOK0,x
    32 1018 F6 94			inc ZPZX2.BufferTo,x
    33 101A D6 B9			dec ZPZX2.ByteCount,x
    34 101C D0 44			bne ProcessNextIteration
    35 101E 16 CB			asl ZPZX2.BitByte,x
    36 1020 B0 1F			bcs CopyFromNewOffset		;* Carry Set -> Copy From New Offset, Carry Not Set -> Copy From Last Offset
    37 1022 20 96 10			jsr GetElias
    38 1025 90 2D			bcc SetBufferOffset		; Unconditional
    39 					
    40 				//-------------------------------------------//
    41
    42 1027			CopyFromLastOffset:
    43 1027 A1 A6			lda (ZPZX2.BufferOffset,x)
    44 1029 F6 A6			inc ZPZX2.BufferOffset,x
    45 				;	jsr WriteByteTo
    46 102B 81 94			sta (ZPZX2.BufferTo,x)
    47 102D 9D ED 10			sta SDWPOK0,x
    48 1030 F6 94			inc ZPZX2.BufferTo,x
    49 1032 D6 B9			dec ZPZX2.ByteCount,x
    50 1034 D0 2C			bne ProcessNextIteration
    51 1036 16 CB			asl ZPZX2.BitByte,x
    52 1038 B0 07			bcs CopyFromNewOffset		;* Carry Set -> Copy From New Offset, Carry Not Set -> Copy From Literal
    53 103A 20 96 10			jsr GetElias
    54 103D A9 01			lda #$01			; Set state to Copy From Literal
    55 103F 90 1F			bcc SetNewState			; Unconditional
    56 					
    57 				//-------------------------------------------//
    58 					
    59 1041			CopyFromNewOffset:
    60 				;	jsr GetByteFrom
    61 1041 A1 82			lda (ZPZX2.BufferFrom,x)
    62 1043 F6 82			inc ZPZX2.BufferFrom,x
    63 1045 D0 02			bne CopyFromNewOffset_a
    64 1047 F6 83			inc ZPZX2.BufferFrom+1,x
    65 1049			CopyFromNewOffset_a:
    66 1049 95 B8			sta ZPZX2.LastOffset,x
    67 104B 69 00			adc #0
    68 104D F0 11			beq SetNewState			; End of File was reached
    69 104F 20 96 10			jsr GetElias
    70 1052 F6 B9			inc ZPZX2.ByteCount,x		; Add 1 to the byte count for every new offset
    71 					
    72 				//-------------------------------------------//
    73
    74 1054			SetBufferOffset:
    75 1054 B5 94			lda ZPZX2.BufferTo,x
    76 1056 F5 B8			sbc ZPZX2.LastOffset,x
    77 1058 95 A6			sta ZPZX2.BufferOffset,x
    78 105A B5 95			lda ZPZX2.BufferTo+1,x
    79 105C 95 A7			sta ZPZX2.BufferOffset+1,x
    80 105E A9 FF			lda #$FF			; Set state to Copy From Last Offset
    81 					
    82 				//-------------------------------------------//
    83
    84 1060			SetNewState:
    85 1060 95 CA			sta ZPZX2.StatusCode,x
    86 1062			ProcessNextIteration:
    87 1062 CA				dex
    88 1063 CA				dex
    89 1064 10 9C			bpl DecompressZX2Continue
    90 1066 60				rts
    91
    92 				//-------------------------------------------//
    93
    94 1067			DecompressZX2Reset:
    95 1067 94 B8			sty ZPZX2.LastOffset,x		; Guaranteed to be 0 from StatusCode
    96 1069 C8				iny
    97 106A 94 CA			sty ZPZX2.StatusCode,x		; Set state to Copy From Literal
    98 106C 94 B9			sty ZPZX2.ByteCount,x		; Initialise ByteCount to 1
    99 106E			DecompressZX2Reset_a:
   100 106E BD 59 11			lda ChunkSection,x		; Get the Channel's array of Chunks address
   101 1071 85 80			sta ZPZX2.TMP0
   102 1073 BD 5A 11			lda ChunkSection+1,x
   103 1076 85 81			sta ZPZX2.TMP1
   104 1078 B4 DC			ldy ZPZX2.ChunkIndex,x		; Get the Chunk Section offset
   105 107A			DecompressZX2Reset_b:
   106 107A B1 80			lda (ZPZX2.TMP0),y
   107 107C C8				iny
   108 107D C9 FF			cmp #$FF			; Is it the end of the Chunk Sequence?
   109 107F D0 05			bne DecompressZX2Reset_c	; If not, process ahead like normal
   110 1081 B1 80			lda (ZPZX2.TMP0),y		; The next byte in the sequence will be used as a Loop Point
   111 1083 A8				tay
   112 1084 B0 F4			bcs DecompressZX2Reset_b	; Unconditional
   113 1086			DecompressZX2Reset_c:
   114 1086 94 DC			sty ZPZX2.ChunkIndex,x		; Increment the Chunk Section offset for the next time
   115 1088 A8				tay
   116 1089 B9 35 11			lda ChunkIndexLSB,y		; Copy the Chunk address into BufferFrom to fully initialise it to load data from that Chunk
   117 108C 95 82			sta ZPZX2.BufferFrom,x
   118 108E B9 47 11			lda ChunkIndexMSB,y
   119 1091 95 83			sta ZPZX2.BufferFrom+1,x
   120 1093			DecompressZX2Reset_d:
   121 1093 38				sec				; Initial Bit is needed for GetElias
   122 1094 B0 0C			bcs GetEliasSkip		; Unconditional
   123
   124 				//-------------------------------------------//
   125
   126 1096			GetElias:
   127 1096 F6 B9			inc ZPZX2.ByteCount,x		; Guaranteed to be 0
   128 1098 D0 04			bne GetEliasLoop_a
   129 109A			GetEliasLoop:
   130 109A 16 CB			asl ZPZX2.BitByte,x
   131 109C 36 B9			rol ZPZX2.ByteCount,x
   132 109E			GetEliasLoop_a:
   133 109E 16 CB			asl ZPZX2.BitByte,x
   134 10A0 D0 0B			bne GetEliasLoop_c
   135 10A2			GetEliasSkip:
   136 				;	jsr GetByteFrom
   137 10A2 A1 82			lda (ZPZX2.BufferFrom,x)
   138 10A4 F6 82			inc ZPZX2.BufferFrom,x
   139 10A6 D0 02			bne GetEliasLoop_b
   140 10A8 F6 83			inc ZPZX2.BufferFrom+1,x
   141 10AA			GetEliasLoop_b:
   142 10AA 2A				rol @
   143 10AB 95 CB			sta ZPZX2.BitByte,x
   144 10AD			GetEliasLoop_c:	
   145 10AD B0 EB			bcs GetEliasLoop
   146 10AF			GetEliasDone:
   147 10AF 60				rts
   148
   149 				//-------------------------------------------//
   150
   151 				/*
   152 				GetByteFrom:
   153 					lda (ZPZX2.BufferFrom,x)
   154 					inc ZPZX2.BufferFrom,x
   155 					bne GetByteFromDone
   156 					inc ZPZX2.BufferFrom+1,x
   157 				GetByteFromDone:
   158 					rts
   159 				*/
   159
   160
   161 				//-------------------------------------------//
   162
   163 				/*
   164 				WriteByteTo:
   165 					sta (ZPZX2.BufferTo,x)
   166 					sta SDWPOK0,x
   167 					inc ZPZX2.BufferTo,x
   168 					dec ZPZX2.ByteCount,x
   169 				WriteByteToDone:
   170 					rts
   171 				*/
   171
   172
   173 				//-------------------------------------------//
   174
    52
    53 				;* ----------------------------------------------------------------------------
    54
    55 				;* Set POKEY registers at least once per VBI using the last buffered values
    56
    57 10B0			SetPokey
    58 10B0 AD FF 10			lda POKSKC0 
    59 10B3 8D 0F D2			sta $D20F 
    60 10B6 AC FD 10			ldy POKCTL0
    61 10B9 AD ED 10			lda POKF0
    62 10BC AE EF 10			ldx POKC0
    63 10BF 8D 00 D2			sta $D200
    64 10C2 8E 01 D2			stx $D201
    65 10C5 AD F1 10			lda POKF1
    66 10C8 AE F3 10			ldx POKC1
    67 10CB 8D 02 D2			sta $D202
    68 10CE 8E 03 D2			stx $D203
    69 10D1 AD F5 10			lda POKF2
    70 10D4 AE F7 10			ldx POKC2
    71 10D7 8D 04 D2			sta $D204
    72 10DA 8E 05 D2			stx $D205
    73 10DD AD F9 10			lda POKF3
    74 10E0 AE FB 10			ldx POKC3
    75 10E3 8D 06 D2			sta $D206
    76 10E6 8E 07 D2			stx $D207
    77 10E9 8C 08 D2			sty $D208
    78 10EC 60				rts
    79
    80 				;* Left and Right POKEY buffer
    81
    82 10ED			SDWPOK0
    83 = 10EE			SDWPOK1 = SDWPOK0+1
    84 10ED 00 00		POKF0	.byte $00, $00
    85 10EF 00 00		POKC0	.byte $00, $00
    86 10F1 00 00		POKF1	.byte $00, $00
    87 10F3 00 00		POKC1	.byte $00, $00
    88 10F5 00 00		POKF2	.byte $00, $00
    89 10F7 00 00		POKC2	.byte $00, $00
    90 10F9 00 00		POKF3	.byte $00, $00
    91 10FB 00 00		POKC3	.byte $00, $00
    92 10FD 00 00		POKCTL0	.byte $00, $00
    93 10FF 03 03		POKSKC0 .byte $03, $03
    94
    95 				;* ----------------------------------------------------------------------------
    96
    97 				;* Main program will start executing from here, and will loop infinitely
    98
    99 1101			Start:
   100 1101 A2 6D			ldx #.len ZPZX2-1
   101 1103 A0 00			ldy #0
   102 1105			Clear:
   103 1105 94 80			sty ZPZX2,x
   104 1107 CA				dex
   105 1108 10 FB			bpl Clear
   106 110A A2 10			ldx #8*2
   107 110C			Initialise:
   108 110C 8A				txa
   109 110D 4A				lsr @
   110 110E 69 07			adc #>ZX2BUF
   111 1110 95 95			sta ZPZX2.BufferTo+1,x
   112 1112 94 94			sty ZPZX2.BufferTo,x
   113 1114 CA				dex
   114 1115 CA				dex
   115 1116 10 F4			bpl Initialise
   116 					
   117 				/*
   118 				Loop:
   119 				;	lda #0
   120 				;	sta COLPF0
   121 				;	sta COLPF1
   122 				;	sta COLPF2
   123 				;	sta COLPF3
   124 				;	sta COLBK
   125 				Loop0:
   126 					lda VCOUNT
   127 					bne Loop0
   128 				;	sta WSYNC
   129 				;	lda #$69
   130 					lda POKF0
   131 					sta COLPF2
   132 				;	lda POKCTL0
   133 					sta COLBK
   134 					jsr SetPokey
   135 					jsr DecompressZX2
   136 					lda #0
   137 					sta COLPF2
   138 					sta COLBK
   139 				;	sta WSYNC
   140 				Loop1:
   141 					lda VCOUNT
   142 					cmp #16*1	;+1
   143 					bcc Loop1
   144 				;	sta WSYNC
   145 				;	lda #$69-1
   146 					lda POKC0
   147 					sta COLPF2
   148 				;	lda POKCTL0
   149 					sta COLBK
   150 					jsr SetPokey
   151 					jsr DecompressZX2
   152 					lda #0
   153 					sta COLPF2
   154 					sta COLBK
   155 				;	sta WSYNC
   156 				Loop2:
   157 					lda VCOUNT
   158 					cmp #16*2	;+1
   159 					bcc Loop2
   160 				;	sta WSYNC
   161 				;	lda #$69-2
   162 					lda POKF1
   163 					sta COLPF2
   164 				;	lda POKCTL0
   165 					sta COLBK
   166 					jsr SetPokey
   167 					jsr DecompressZX2
   168 					lda #0
   169 					sta COLPF2
   170 					sta COLBK
   171 				;	sta WSYNC
   172 				Loop3:
   173 					lda VCOUNT
   174 					cmp #16*3	;+1
   175 					bcc Loop3
   176 				;	sta WSYNC
   177 				;	lda #$69-3
   178 					lda POKC1
   179 					sta COLPF2
   180 				;	lda POKCTL0
   181 					sta COLBK
   182 					jsr SetPokey
   183 					jsr DecompressZX2
   184 					lda #0
   185 					sta COLPF2
   186 					sta COLBK
   187 				;	sta WSYNC
   188 				Loop4:
   189 					lda VCOUNT
   190 					cmp #16*4	;+1
   191 					bcc Loop4
   192 				;	sta WSYNC
   193 				;	lda #$69-4
   194 					lda POKF2
   195 					sta COLPF2
   196 				;	lda POKCTL0
   197 					sta COLBK
   198 					jsr SetPokey
   199 					jsr DecompressZX2
   200 					lda #0
   201 					sta COLPF2
   202 					sta COLBK
   203 				;	sta WSYNC
   204 				Loop5:
   205 					lda VCOUNT
   206 					cmp #16*5	;+1
   207 					bcc Loop5
   208 				;	sta WSYNC
   209 				;	lda #$69-5
   210 					lda POKC2
   211 					sta COLPF2
   212 				;	lda POKCTL0
   213 					sta COLBK
   214 					jsr SetPokey
   215 					jsr DecompressZX2
   216 					lda #0
   217 					sta COLPF2
   218 					sta COLBK
   219 				;	sta WSYNC
   220 				Loop6:
   221 					lda VCOUNT
   222 					cmp #16*6	;+1
   223 					bcc Loop6
   224 				;	sta WSYNC
   225 				;	lda #$69-6
   226 					lda POKF3
   227 					sta COLPF2
   228 				;	lda POKCTL0
   229 					sta COLBK
   230 					jsr SetPokey
   231 					jsr DecompressZX2
   232 					lda #0
   233 					sta COLPF2
   234 					sta COLBK
   235 				;	sta WSYNC
   236 				Loop7:
   237 					lda VCOUNT
   238 					cmp #16*7	;+1
   239 					bcc Loop7
   240 				;	sta WSYNC
   241 				;	lda #$69-7
   242 					lda POKC3
   243 					sta COLPF2
   244 				;	lda POKCTL0
   245 					sta COLBK
   246 					jsr SetPokey
   247 					jsr DecompressZX2
   248 					lda #0
   249 					sta COLPF2
   250 					sta COLBK
   251 				;	sta WSYNC
   252 					jmp Loop
   253 					run Start
   254 				*/
   254
   255
   256 1118			Loop:
   257 1118 AD 0B D4			lda VCOUNT
   258 111B D0 FB			bne Loop
   259 111D A9 69			lda #$69
   260 111F 8D 18 D0			sta COLPF2
   261 1122 8D 1A D0			sta COLBK
   262 1125 20 B0 10			jsr SetPokey
   263 1128 20 00 10			jsr DecompressZX2
   264 112B A9 00			lda #0
   265 112D 8D 18 D0			sta COLPF2
   266 1130 8D 1A D0			sta COLBK
   267 1133 F0 E3			beq Loop
   268 02E0-02E1> 01 11			run Start
   269
   270 				;* ----------------------------------------------------------------------------
   271
   272 				;* Compressed ZX2 data chunks used for streaming POKEY register values at regular intervals
   273 				;* Chunks will make use of a few ByteCodes for Detecting Loops and Indexing data cleanly
   274 				;* If the ChunkSection table holds a value of $80 and higher, be used as a Loop Point within itself
   275 				;* Otherwise, it will be an offset to the ChunkIndex table, where up to 127 values may be used
   276 				;* This effectively allows using Chunks of different sizes, assuming that all channels are synced
   277
   278 				/*
   279 				ChunkIndexLSB:
   280 					.byte <Chunk_0_00, <Chunk_0_04, <Chunk_0_08, <Chunk_0_18, <Chunk_1_00, <Chunk_1_04, <Chunk_1_08, <Chunk_1_18, <Chunk_2_00, <Chunk_2_04, <Chunk_2_08, <Chunk_2_09, <Chunk_2_18, <Chunk_2_19, <Chunk_3_04, <Chunk_3_08, <Chunk_3_18, <Chunk_4_00, <Chunk_4_18, <Chunk_6_00, <Chunk_6_01, <Chunk_6_18, <Chunk_7_10, <Chunk_8_00, <Chunk_8_04, <Chunk_8_08, <Chunk_8_18
   281 				ChunkIndexMSB:
   282 					.byte >Chunk_0_00, >Chunk_0_04, >Chunk_0_08, >Chunk_0_18, >Chunk_1_00, >Chunk_1_04, >Chunk_1_08, >Chunk_1_18, >Chunk_2_00, >Chunk_2_04, >Chunk_2_08, >Chunk_2_09, >Chunk_2_18, >Chunk_2_19, >Chunk_3_04, >Chunk_3_08, >Chunk_3_18, >Chunk_4_00, >Chunk_4_18, >Chunk_6_00, >Chunk_6_01, >Chunk_6_18, >Chunk_7_10, >Chunk_8_00, >Chunk_8_04, >Chunk_8_08, >Chunk_8_18
   283 				ChunkSection:
   284 					.word Section_0, Section_1, Section_2, Section_3, Section_4, Section_5, Section_6, Section_7, Section_8
   285 				Section_0:
   286 					.byte $00, $00, $00, $00, $01, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $01, $02, $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03
   287 					GOTOCHUNK 8
   288 				Section_1:
   289 					.byte $04, $04, $04, $04, $05, $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $06, $05, $05, $05, $05, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07, $07, $07
   290 					GOTOCHUNK 4
   291 				Section_2:
   292 					.byte $08, $08, $08, $08, $09, $09, $09, $09, $0A, $0B, $0B, $0B, $0B, $0B, $0B, $0B, $09, $09, $09, $09, $0B, $0B, $0B, $0B, $0C, $0D, $0D, $0D, $0D, $0D, $0D, $0D
   293 					GOTOCHUNK 12
   294 				Section_3:
   295 					.byte $08, $08, $08, $08, $0E, $0E, $0E, $0E, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0E, $0E, $0E, $0E, $0F, $0F, $0F, $0F, $10, $10, $10, $10, $10, $10, $10, $10
   296 					GOTOCHUNK 4
   297 				Section_4:
   298 					.byte $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $12, $12, $12, $12, $12, $12, $12, $12
   299 					GOTOCHUNK 8
   300 				Section_5:
   301 					.byte $08	;, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
   302 					GOTOCHUNK 0
   303 				Section_6:
   304 					.byte $13, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $14, $15, $15, $15, $15, $15, $15, $15, $15
   305 					GOTOCHUNK 12
   306 				Section_7:
   307 					.byte $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $16, $16, $16, $16, $16, $16, $16, $16, $16, $16, $16, $16, $16, $16, $16, $16
   308 					GOTOCHUNK 8
   309 				Section_8:
   310 					.byte $17, $17, $17, $17, $18, $18, $18, $18, $19, $19, $19, $19, $19, $19, $19, $19, $18, $18, $18, $18, $19, $19, $19, $19, $1A, $1A, $1A, $1A, $1A, $1A, $1A, $1A
   311 					GOTOCHUNK 4
   312 				Chunk_0_00:
   313 					ins "/chunks/Sketch 44.0_00"
   314 				Chunk_0_04:
   315 					ins "/chunks/Sketch 44.0_04"
   316 				Chunk_0_08:
   317 					ins "/chunks/Sketch 44.0_08"
   318 				Chunk_0_18:
   319 					ins "/chunks/Sketch 44.0_18"
   320 				Chunk_1_00:
   321 					ins "/chunks/Sketch 44.1_00"
   322 				Chunk_1_04:
   323 					ins "/chunks/Sketch 44.1_04"
   324 				Chunk_1_08:
   325 					ins "/chunks/Sketch 44.1_08"
   326 				Chunk_1_18:
   327 					ins "/chunks/Sketch 44.1_18"
   328 				Chunk_2_00:
   329 					ins "/chunks/Sketch 44.2_00"
   330 				Chunk_2_04:
   331 					ins "/chunks/Sketch 44.2_04"
   332 				Chunk_2_08:
   333 					ins "/chunks/Sketch 44.2_08"
   334 				Chunk_2_09:
   335 					ins "/chunks/Sketch 44.2_09"
   336 				Chunk_2_18:
   337 					ins "/chunks/Sketch 44.2_18"
   338 				Chunk_2_19:
   339 					ins "/chunks/Sketch 44.2_19"
   340 				Chunk_3_04:
   341 					ins "/chunks/Sketch 44.3_04"
   342 				Chunk_3_08:
   343 					ins "/chunks/Sketch 44.3_08"
   344 				Chunk_3_18:
   345 					ins "/chunks/Sketch 44.3_18"
   346 				Chunk_4_00:
   347 					ins "/chunks/Sketch 44.4_00"
   348 				Chunk_4_18:
   349 					ins "/chunks/Sketch 44.4_18"
   350 				Chunk_6_00:
   351 					ins "/chunks/Sketch 44.6_00"
   352 				Chunk_6_01:
   353 					ins "/chunks/Sketch 44.6_01"
   354 				Chunk_6_18:
   355 					ins "/chunks/Sketch 44.6_18"
   356 				Chunk_7_10:
   357 					ins "/chunks/Sketch 44.7_10"
   358 				Chunk_8_00:
   359 					ins "/chunks/Sketch 44.8_00"
   360 				Chunk_8_04:
   361 					ins "/chunks/Sketch 44.8_04"
   362 				Chunk_8_08:
   363 					ins "/chunks/Sketch 44.8_08"
   364 				Chunk_8_18:
   365 					ins "/chunks/Sketch 44.8_18"
   366 				*/
   366
   367
   368 				/*
   369 				ChunkIndexLSB:
   370 					.byte <Chunk_0_00, <Chunk_0_01, <Chunk_0_02, <Chunk_0_03, <Chunk_0_04, <Chunk_0_05, <Chunk_0_06, <Chunk_1_00, <Chunk_1_01, <Chunk_1_02, <Chunk_1_03, <Chunk_1_04, <Chunk_1_05, <Chunk_1_06, <Chunk_2_00, <Chunk_2_01, <Chunk_2_02, <Chunk_2_03, <Chunk_2_04, <Chunk_2_05, <Chunk_2_06, <Chunk_3_00, <Chunk_3_01, <Chunk_3_02, <Chunk_3_03, <Chunk_3_05, <Chunk_4_00, <Chunk_4_01, <Chunk_4_05, <Chunk_4_06, <Chunk_5_00, <Chunk_5_01, <Chunk_5_05, <Chunk_5_06, <Chunk_6_00, <Chunk_6_01, <Chunk_6_02, <Chunk_6_03, <Chunk_6_04, <Chunk_6_05, <Chunk_7_00, <Chunk_7_01, <Chunk_7_02, <Chunk_7_03, <Chunk_7_04, <Chunk_7_05, <Chunk_8_00, <Chunk_8_01, <Chunk_8_02, <Chunk_8_03, <Chunk_8_04, <Chunk_8_05, <Chunk_8_06
   371 				ChunkIndexMSB:
   372 					.byte >Chunk_0_00, >Chunk_0_01, >Chunk_0_02, >Chunk_0_03, >Chunk_0_04, >Chunk_0_05, >Chunk_0_06, >Chunk_1_00, >Chunk_1_01, >Chunk_1_02, >Chunk_1_03, >Chunk_1_04, >Chunk_1_05, >Chunk_1_06, >Chunk_2_00, >Chunk_2_01, >Chunk_2_02, >Chunk_2_03, >Chunk_2_04, >Chunk_2_05, >Chunk_2_06, >Chunk_3_00, >Chunk_3_01, >Chunk_3_02, >Chunk_3_03, >Chunk_3_05, >Chunk_4_00, >Chunk_4_01, >Chunk_4_05, >Chunk_4_06, >Chunk_5_00, >Chunk_5_01, >Chunk_5_05, >Chunk_5_06, >Chunk_6_00, >Chunk_6_01, >Chunk_6_02, >Chunk_6_03, >Chunk_6_04, >Chunk_6_05, >Chunk_7_00, >Chunk_7_01, >Chunk_7_02, >Chunk_7_03, >Chunk_7_04, >Chunk_7_05, >Chunk_8_00, >Chunk_8_01, >Chunk_8_02, >Chunk_8_03, >Chunk_8_04, >Chunk_8_05, >Chunk_8_06
   373 				ChunkSection:
   374 					.word Section_0, Section_1, Section_2, Section_3, Section_4, Section_5, Section_6, Section_7, Section_8
   375 				Section_0:
   376 					.byte $00, $01, $02, $03, $04, $05, $06
   377 					GOTOCHUNK 1
   378 				Section_1:
   379 					.byte $07, $08, $09, $0A, $0B, $0C, $0D
   380 					GOTOCHUNK 1
   381 				Section_2:
   382 					.byte $0E, $0F, $10, $11, $12, $13, $14
   383 					GOTOCHUNK 1
   384 				Section_3:
   385 					.byte $15, $16, $17, $18, $18, $19, $19
   386 					GOTOCHUNK 1
   387 				Section_4:
   388 					.byte $1A, $1B, $1B, $1B, $1B, $1C, $1D
   389 					GOTOCHUNK 1
   390 				Section_5:
   391 					.byte $1E, $1F, $1F, $1F, $1F, $20, $21
   392 					GOTOCHUNK 1
   393 				Section_6:
   394 					.byte $22, $23, $24, $25, $26, $27, $27
   395 					GOTOCHUNK 1
   396 				Section_7:
   397 					.byte $28, $29, $2A, $2B, $2C, $2D, $2D
   398 					GOTOCHUNK 1
   399 				Section_8:
   400 					.byte $2E, $2F, $30, $31, $32, $33, $34
   401 					GOTOCHUNK 1
   402 				Chunk_0_00:
   403 					ins "/chunks/Flourishing Falls.0_00"
   404 				Chunk_0_01:
   405 					ins "/chunks/Flourishing Falls.0_01"
   406 				Chunk_0_02:
   407 					ins "/chunks/Flourishing Falls.0_02"
   408 				Chunk_0_03:
   409 					ins "/chunks/Flourishing Falls.0_03"
   410 				Chunk_0_04:
   411 					ins "/chunks/Flourishing Falls.0_04"
   412 				Chunk_0_05:
   413 					ins "/chunks/Flourishing Falls.0_05"
   414 				Chunk_0_06:
   415 					ins "/chunks/Flourishing Falls.0_06"
   416 				Chunk_1_00:
   417 					ins "/chunks/Flourishing Falls.1_00"
   418 				Chunk_1_01:
   419 					ins "/chunks/Flourishing Falls.1_01"
   420 				Chunk_1_02:
   421 					ins "/chunks/Flourishing Falls.1_02"
   422 				Chunk_1_03:
   423 					ins "/chunks/Flourishing Falls.1_03"
   424 				Chunk_1_04:
   425 					ins "/chunks/Flourishing Falls.1_04"
   426 				Chunk_1_05:
   427 					ins "/chunks/Flourishing Falls.1_05"
   428 				Chunk_1_06:
   429 					ins "/chunks/Flourishing Falls.1_06"
   430 				Chunk_2_00:
   431 					ins "/chunks/Flourishing Falls.2_00"
   432 				Chunk_2_01:
   433 					ins "/chunks/Flourishing Falls.2_01"
   434 				Chunk_2_02:
   435 					ins "/chunks/Flourishing Falls.2_02"
   436 				Chunk_2_03:
   437 					ins "/chunks/Flourishing Falls.2_03"
   438 				Chunk_2_04:
   439 					ins "/chunks/Flourishing Falls.2_04"
   440 				Chunk_2_05:
   441 					ins "/chunks/Flourishing Falls.2_05"
   442 				Chunk_2_06:
   443 					ins "/chunks/Flourishing Falls.2_06"
   444 				Chunk_3_00:
   445 					ins "/chunks/Flourishing Falls.3_00"
   446 				Chunk_3_01:
   447 					ins "/chunks/Flourishing Falls.3_01"
   448 				Chunk_3_02:
   449 					ins "/chunks/Flourishing Falls.3_02"
   450 				Chunk_3_03:
   451 					ins "/chunks/Flourishing Falls.3_03"
   452 				Chunk_3_05:
   453 					ins "/chunks/Flourishing Falls.3_05"
   454 				Chunk_4_00:
   455 					ins "/chunks/Flourishing Falls.4_00"
   456 				Chunk_4_01:
   457 					ins "/chunks/Flourishing Falls.4_01"
   458 				Chunk_4_05:
   459 					ins "/chunks/Flourishing Falls.4_05"
   460 				Chunk_4_06:
   461 					ins "/chunks/Flourishing Falls.4_06"
   462 				Chunk_5_00:
   463 					ins "/chunks/Flourishing Falls.5_00"
   464 				Chunk_5_01:
   465 					ins "/chunks/Flourishing Falls.5_01"
   466 				Chunk_5_05:
   467 					ins "/chunks/Flourishing Falls.5_05"
   468 				Chunk_5_06:
   469 					ins "/chunks/Flourishing Falls.5_06"
   470 				Chunk_6_00:
   471 					ins "/chunks/Flourishing Falls.6_00"
   472 				Chunk_6_01:
   473 					ins "/chunks/Flourishing Falls.6_01"
   474 				Chunk_6_02:
   475 					ins "/chunks/Flourishing Falls.6_02"
   476 				Chunk_6_03:
   477 					ins "/chunks/Flourishing Falls.6_03"
   478 				Chunk_6_04:
   479 					ins "/chunks/Flourishing Falls.6_04"
   480 				Chunk_6_05:
   481 					ins "/chunks/Flourishing Falls.6_05"
   482 				Chunk_7_00:
   483 					ins "/chunks/Flourishing Falls.7_00"
   484 				Chunk_7_01:
   485 					ins "/chunks/Flourishing Falls.7_01"
   486 				Chunk_7_02:
   487 					ins "/chunks/Flourishing Falls.7_02"
   488 				Chunk_7_03:
   489 					ins "/chunks/Flourishing Falls.7_03"
   490 				Chunk_7_04:
   491 					ins "/chunks/Flourishing Falls.7_04"
   492 				Chunk_7_05:
   493 					ins "/chunks/Flourishing Falls.7_05"
   494 				Chunk_8_00:
   495 					ins "/chunks/Flourishing Falls.8_00"
   496 				Chunk_8_01:
   497 					ins "/chunks/Flourishing Falls.8_01"
   498 				Chunk_8_02:
   499 					ins "/chunks/Flourishing Falls.8_02"
   500 				Chunk_8_03:
   501 					ins "/chunks/Flourishing Falls.8_03"
   502 				Chunk_8_04:
   503 					ins "/chunks/Flourishing Falls.8_04"
   504 				Chunk_8_05:
   505 					ins "/chunks/Flourishing Falls.8_05"
   506 				Chunk_8_06:
   507 					ins "/chunks/Flourishing Falls.8_06"
   508 				*/
   508
   509
   510 				/*
   511 				ChunkIndexLSB:
   512 					.byte <Chunk_0_00, <Chunk_1_00, <Chunk_2_00, <Chunk_3_00, <Chunk_4_00, <Chunk_5_00, <Chunk_6_00, <Chunk_7_00, <Chunk_8_00
   513 				ChunkIndexMSB:
   514 					.byte >Chunk_0_00, >Chunk_1_00, >Chunk_2_00, >Chunk_3_00, >Chunk_4_00, >Chunk_5_00, >Chunk_6_00, >Chunk_7_00, >Chunk_8_00
   515 				ChunkSection:
   516 					.word Section_0, Section_1, Section_2, Section_3, Section_4, Section_5, Section_6, Section_7, Section_8
   517 				Section_0:
   518 					.byte $00
   519 					GOTOCHUNK 0
   520 				Section_1:
   521 					.byte $01
   522 					GOTOCHUNK 0
   523 				Section_2:
   524 					.byte $02
   525 					GOTOCHUNK 0
   526 				Section_3:
   527 					.byte $03
   528 					GOTOCHUNK 0
   529 				Section_4:
   530 					.byte $04
   531 					GOTOCHUNK 0
   532 				Section_5:
   533 					.byte $05
   534 					GOTOCHUNK 0
   535 				Section_6:
   536 					.byte $06
   537 					GOTOCHUNK 0
   538 				Section_7:
   539 					.byte $07
   540 					GOTOCHUNK 0
   541 				Section_8:
   542 					.byte $08
   543 					GOTOCHUNK 0
   544 				Chunk_0_00:
   545 					ins "/chunks/stranded on io.0_00"
   546 				Chunk_1_00:
   547 					ins "/chunks/stranded on io.1_00"
   548 				Chunk_2_00:
   549 					ins "/chunks/stranded on io.2_00"
   550 				Chunk_3_00:
   551 					ins "/chunks/stranded on io.3_00"
   552 				Chunk_4_00:
   553 					ins "/chunks/stranded on io.4_00"
   554 				Chunk_5_00:
   555 					ins "/chunks/stranded on io.5_00"
   556 				Chunk_6_00:
   557 					ins "/chunks/stranded on io.6_00"
   558 				Chunk_7_00:
   559 					ins "/chunks/stranded on io.7_00"
   560 				Chunk_8_00:
   561 					ins "/chunks/stranded on io.8_00"
   562 				*/
   562
   563
   564 1135			ChunkIndexLSB:
   565 1135-1F89> 8F 4F 8E C7 + 	.byte <Chunk_0_00, <Chunk_1_00, <Chunk_2_00, <Chunk_3_00, <Chunk_4_00, <Chunk_5_00, <Chunk_6_00, <Chunk_7_00, <Chunk_8_00
   566 113E B1 31 D0 C4 7F 51 + 	.byte <Chunk_9_00, <Chunk_A_00, <Chunk_B_00, <Chunk_C_00, <Chunk_D_00, <Chunk_E_00, <Chunk_F_00, <Chunk_G_00, <Chunk_H_00
   567 1147			ChunkIndexMSB:
   568 1147 11 12 12 12 13 13 + 	.byte >Chunk_0_00, >Chunk_1_00, >Chunk_2_00, >Chunk_3_00, >Chunk_4_00, >Chunk_5_00, >Chunk_6_00, >Chunk_7_00, >Chunk_8_00
   569 1150 14 18 19 1A 1B 1C + 	.byte >Chunk_9_00, >Chunk_A_00, >Chunk_B_00, >Chunk_C_00, >Chunk_D_00, >Chunk_E_00, >Chunk_F_00, >Chunk_G_00, >Chunk_H_00
   570 1159			ChunkSection:
   571 1159 6B 11 6F 11 73 11 + 	.word Section_0, Section_1, Section_2, Section_3, Section_4, Section_5, Section_6, Section_7, Section_8
   572 116B			Section_0:
   573 116B 00 09			.byte $00, $09
   574 116D				GOTOCHUNK 1
Macro: GOTOCHUNK [Source: decompress.asm]
     2 116D FF 01			.byte $FF, 1
Source: decompress.asm
   575 116F			Section_1:
   576 116F 01 0A			.byte $01, $0A
   577 1171				GOTOCHUNK 1
Macro: GOTOCHUNK [Source: decompress.asm]
     2 1171 FF 01			.byte $FF, 1
Source: decompress.asm
   578 1173			Section_2:
   579 1173 02 0B			.byte $02, $0B
   580 1175				GOTOCHUNK 1
Macro: GOTOCHUNK [Source: decompress.asm]
     2 1175 FF 01			.byte $FF, 1
Source: decompress.asm
   581 1177			Section_3:
   582 1177 03 0C			.byte $03, $0C
   583 1179				GOTOCHUNK 1
Macro: GOTOCHUNK [Source: decompress.asm]
     2 1179 FF 01			.byte $FF, 1
Source: decompress.asm
   584 117B			Section_4:
   585 117B 04 0D			.byte $04, $0D
   586 117D				GOTOCHUNK 1
Macro: GOTOCHUNK [Source: decompress.asm]
     2 117D FF 01			.byte $FF, 1
Source: decompress.asm
   587 117F			Section_5:
   588 117F 05 0E			.byte $05, $0E
   589 1181				GOTOCHUNK 1
Macro: GOTOCHUNK [Source: decompress.asm]
     2 1181 FF 01			.byte $FF, 1
Source: decompress.asm
   590 1183			Section_6:
   591 1183 06 0F			.byte $06, $0F
   592 1185				GOTOCHUNK 1
Macro: GOTOCHUNK [Source: decompress.asm]
     2 1185 FF 01			.byte $FF, 1
Source: decompress.asm
   593 1187			Section_7:
   594 1187 07 10			.byte $07, $10
   595 1189				GOTOCHUNK 1
Macro: GOTOCHUNK [Source: decompress.asm]
     2 1189 FF 01			.byte $FF, 1
Source: decompress.asm
   596 118B			Section_8:
   597 118B 08 11			.byte $08, $11
   598 118D				GOTOCHUNK 1
Macro: GOTOCHUNK [Source: decompress.asm]
     2 118D FF 01			.byte $FF, 1
Source: decompress.asm
   599 118F			Chunk_0_00:
   600 118F CB 00 62 63 DF 0D + 	ins "/chunks/io intro.0_00"
   601 124F			Chunk_1_00:
   602 124F CA 01 23 22 0E 21 + 	ins "/chunks/io intro.1_00"
   603 128E			Chunk_2_00:
   604 128E 2A 00 AF 7F 00 FE + 	ins "/chunks/io intro.2_00"
   605 12C7			Chunk_3_00:
   606 12C7 3F 00 FF 7F FE FF + 	ins "/chunks/io intro.3_00"
   607 1310			Chunk_4_00:
   608 1310 3A 00 AB 7F 00 FE + 	ins "/chunks/io intro.4_00"
   609 13B4			Chunk_5_00:
   610 13B4 3A 00 AB 7F 00 FE + 	ins "/chunks/io intro.5_00"
   611 13F6			Chunk_6_00:
   612 13F6 2A 00 AF 7F 00 FE + 	ins "/chunks/io intro.6_00"
   613 1429			Chunk_7_00:
   614 1429 3F 00 FF 7F FE FF + 	ins "/chunks/io intro.7_00"
   615 1485			Chunk_8_00:
   616 1485 3F 41 FF 7F FE FF + 	ins "/chunks/io intro.8_00"
   617 14B1			Chunk_9_00:
   618 14B1 CA 00 62 63 32 00 + 	ins "/chunks/io loop.0_00"
   619 1831			Chunk_A_00:
   620 1831 CA 01 23 22 22 00 + 	ins "/chunks/io loop.1_00"
   621 19D0			Chunk_B_00:
   622 19D0 CB 00 6F DF CB 27 + 	ins "/chunks/io loop.2_00"
   623 1AC4			Chunk_C_00:
   624 1AC4 80 81 A2 A1 B8 80 + 	ins "/chunks/io loop.3_00"
   625 1B7F			Chunk_D_00:
   626 1B7F CB 05 4F 00 D6 0D + 	ins "/chunks/io loop.4_00"
   627 1C51			Chunk_E_00:
   628 1C51 CB 06 A2 00 DF 0D + 	ins "/chunks/io loop.5_00"
   629 1D1C			Chunk_F_00:
   630 1D1C B2 00 32 55 75 85 + 	ins "/chunks/io loop.6_00"
   631 1E14			Chunk_G_00:
   632 1E14 A8 8F AF AA A7 A5 + 	ins "/chunks/io loop.7_00"
   633 1EED			Chunk_H_00:
   634 1EED 3B 61 0E 63 DF 1B + 	ins "/chunks/io loop.8_00"
   635
